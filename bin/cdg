#!/usr/bin/env python
#
# Copyright (c) 2016-2017 Jonathan Anderson
# All rights reserved.
#
# This software was developed by BAE Systems, the University of Cambridge
# Computer Laboratory, and Memorial University under DARPA/AFRL contract
# FA8650-15-C-7558 ("CADETS"), as part of the DARPA Transparent Computing
# (TC) research program.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''
Call-and-data-graph processor.

Usage:
    cgd dot         [--output=<dotfile>] <graph>
    cgd filter      [--output=<cdgfile>] <graph> <spec>...
    cgd simplify    [--output=<cdgfile>] <graph>
    cgd -h | --help
    cgd --version

Commands:
    dot             Output GraphViz .dot representation
    simplify        Simplify a complex graph via path compression

Options:
    -h --help               Show this message
    --version               Show version
    -o --output=<outfile>   Output file (default depends on command)
'''

import cdg
import docopt
import sys


args = docopt.docopt(__doc__)

if args['--version']:
    # Try version from installed package first:
    from pkg_resources import get_distribution, DistributionNotFound
    try:
        version = get_distribution("cdg").version
    except:
        version = '<error: failed to get version>'

    print('cdg v%s' % version)
    sys.exit(0)

cgname = args.pop('<graph>')
graph = cdg.load(open(cgname, 'rb'), cgname)
print('Loaded graph with %d nodes, %d edges' % graph.dimensions())

outfile_name = args['--output'] if '--output' in args else None

if args['dot']:
    if outfile_name is None:
        outfile_name = cgname + '.dot'

    graph.to_dot(open(outfile_name, 'w'))

elif args['filter']:
    import cdg.filters
    import networkx.algorithms.operators as ops

    if outfile_name is None:
        outfile_name = cgname + '-filtered.cdg'

    for filter_spec in args.pop('<spec>'):
        try:
            graph = cdg.filters.apply(filter_spec, graph)
        except cdg.filters.FilterError as e:
            sys.stderr.write("Error filtering graph with '%s': %s\n" % (
                e.filter_spec, e.message))
            sys.exit(1)

    graph.save(open(outfile_name, 'wb'))

elif args['simplify']:
    simplified = graph.simplified()

    print('Eliminated %d nodes, %d edges' %
          tuple(x - y for x, y in zip(
                  graph.dimensions(), simplified.dimensions())))

    if outfile_name is None:
        outfile_name = cgname + '-simplified.cdg'

    simplified.save(open(outfile_name, 'wb'))

else:
    assert False    # docopt should not let us reach this point
