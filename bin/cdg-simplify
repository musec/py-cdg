#!/usr/bin/env python
#
# Copyright (c) 2016-2017 Jonathan Anderson
# All rights reserved.
#
# This software was developed by BAE Systems, the University of Cambridge
# Computer Laboratory, and Memorial University under DARPA/AFRL contract
# FA8650-15-C-7558 ("CADETS"), as part of the DARPA Transparent Computing
# (TC) research program.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''
Simplify a call-and-data graph.

Usage:
    cdg-simplify <callgraph> [--output=<outfile>]

Options:
    -o,--output=<outfile>    Output file (cdg binary format)
'''

import cdg
import docopt
import sys

args = docopt.docopt(__doc__)

cgname = args['<callgraph>']
infile = open(cgname, 'rb')

outfile_name = (
    args['--output'] if '--output' in args else cgname + '-simplified.cdg'
)
outfile = open(outfile_name, 'wb')

graph = cdg.load(infile, cgname)
start_complexity = (len(graph.nodes()), len(graph.edges()))

print('Loaded graph with %d nodes, %d edges' % start_complexity)

simplified = graph.simplified()
end_complexity = (len(simplified.nodes()), len(simplified.edges()))

print('Eliminated %d nodes, %d edges' %
        tuple(x - y for x, y in zip(start_complexity, end_complexity)))

simplified.save(outfile)
